{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","wordData","setWordData","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","selectedAnswer","setSelectedAnswer","_useState7","_useState8","isCorrect","setIsCorrect","useEffect","fetch","then","response","json","data","generateQuestion","selectedWord","Math","floor","random","length","filteredData","filter","item","category","japanese","option1","option2","_objectSpread","choices","chinese","sort","showImage","speak","text","lang","window","synthesis","speechSynthesis","utterance","SpeechSynthesisUtterance","console","error","React","createElement","className","Fragment","onClick","src","image","alt","english","map","choice","index","key","answer","disabled","style","color","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4e6c6391.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [wordData, setWordData] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n\n  useEffect(() => {\n    fetch('wordlist.json')\n      .then((response) => response.json())\n      .then((data) => setWordData(data));\n  }, []);\n\n  const handleStart = () => {\n    generateQuestion(wordData);\n  };\n\n  const generateQuestion = (data) => {\n    const randomIndex = Math.floor(Math.random() * data.length);\n    const selectedWord = data[randomIndex];\n    const filteredData = data.filter((item) => item.category === selectedWord.category && item.japanese !== selectedWord.japanese);\n    const option1 = filteredData[Math.floor(Math.random() * filteredData.length)];\n    const option2 = filteredData[Math.floor(Math.random() * filteredData.length)];\n    setCurrentQuestion({\n      ...selectedWord,\n      choices: [selectedWord.chinese, option1.chinese, option2.chinese].sort(() => Math.random() - 0.5),\n      showImage: false,\n    });\n  };\n\n  const handleAnswerClick = (answer) => {\n    setSelectedAnswer(answer);\n    setIsCorrect(answer === currentQuestion.chinese);\n    setCurrentQuestion({ ...currentQuestion, showImage: true });\n  };\n\n  const handleNextClick = () => {\n    setSelectedAnswer(null);\n    setIsCorrect(null);\n    generateQuestion(wordData);\n  };\n\n  const speak = (text, lang) => {\n    if ('speechSynthesis' in window) {\n      const synthesis = window.speechSynthesis;\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = lang;\n      synthesis.speak(utterance);\n    } else {\n      console.error('Web Speech API is not supported in this browser.');\n    }\n  };\n  \n\n  if (wordData.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <h1 className=\"question\">\n          {currentQuestion ? (\n            <>\n              <span>{currentQuestion.japanese} „ÅØ„Å©„Çì„Å™ÊÑèÂë≥„Åß„Åó„Çá„ÅÜÔºü</span>\n              <button onClick={() => speak(currentQuestion.japanese, 'ja-JP')} className=\"speak-button\">\n                üó£\n              </button>\n            </>\n          ) : (\n            'Ready to Start?'\n          )}\n        </h1>\n        {currentQuestion && currentQuestion.showImage && (\n          <img src={currentQuestion.image} alt={currentQuestion.english} className=\"question-image\" />\n        )}\n        <div className=\"choices\">\n          {currentQuestion &&\n            currentQuestion.choices.map((choice, index) => (\n              <div key={index}>\n                <button onClick={() => handleAnswerClick(choice)} disabled={selectedAnswer !== null} className=\"button\">\n                  {choice}\n                </button>\n                {selectedAnswer === choice && (\n                  <span className=\"result\" style={{ color: isCorrect ? 'blue' : 'red' }}>\n                    {isCorrect ? 'Ê≠£Ëß£' : '‰∏çÊ≠£Ëß£'}\n                  </span>\n                )}\n                <button onClick={() => speak(choice, 'zh-CN')} className=\"speak-button\">\n                  üó£\n                </button>\n              </div>\n            ))}\n        </div>\n        {currentQuestion ? (\n          <button onClick={handleNextClick} disabled={selectedAnswer === null} className=\"button next-button\">\n            Ê¨°„ÅÆÂïèÈ°å\n          </button>\n        ) : (\n          <button onClick={handleStart} className=\"button start-button\">\n            Start\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}